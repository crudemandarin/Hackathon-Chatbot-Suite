# Lex-Controller-Lambda 
# Authored by Nykolas Farhangi
# Purpose: Controls Lex Bots generated by DevSecOps-Lex-Builder. Receives current state of Lex bot and returns next state.

# Python Standard Library
import json
import copy

# 3rd Party Libraries
import boto3

# slots = dict of slots
# current = key of dict slots currently pointed at
# recursively scans knowledge base to determine focus
def determineFocus( KNOWLEDGE_BASE, slots, current ):
    print( "=== determineFocus :: Current = " + current + " ===" )

    if slots[ current ] is None: return current
    nextElement = KNOWLEDGE_BASE[ current ][ slots[ current ] ][ "next" ]
    if nextElement is None: return current
    if slots[ nextElement ] is None: return current 

    return determineFocus( KNOWLEDGE_BASE, slots, nextElement )

def getOutput( KNOWLEDGE_BASE, slots, intent, entrySlot ):
    focus = determineFocus( KNOWLEDGE_BASE, slots, entrySlot )
    if focus is None: return None

    print( "Focus :: " + focus )
    output = copy.deepcopy( KNOWLEDGE_BASE[ focus ][ slots[ focus ] ][ "return" ] )

    if "slotToElicit" in output[ "dialogAction" ]:
        output["dialogAction"].update({
            "intentName": intent,
            "slots": slots
        })
    
    return output

def lambda_handler( event, context ):
    print( '\nEvent ===> ', event )
    
    bot = event['bot']['name']
    slots = event['currentIntent']['slots']
    intent = event['currentIntent']['name']

    print( '\nBot Name: ', bot )
    print( '\nRetrieving knowledge base...')
    
    print( 'Knowledge Base Filename: ', 'resources/knowledge base/' + bot + '_knowledge_base.json' )

    s3 = boto3.resource( 's3' )
    obj = s3.Object( 'stealth-startup-lex', 'resources/knowledge base/' + bot + '_knowledge_base.json' )
    KNOWLEDGE_BASE = json.loads( obj.get()['Body'].read().decode( 'utf8' ) )
    
    print( 'Knowledge Base ===> ', KNOWLEDGE_BASE )

    entrySlot = KNOWLEDGE_BASE['meta'][ intent ]['entrySlot']
    
    print( "\n\nSlots:" )
    print( slots )
    print( "\nCurrent Intent Name: " + intent )
    
    if slots[ entrySlot ] is not None: return getOutput( KNOWLEDGE_BASE, slots, intent, entrySlot )
    
    return {
        "dialogAction": {
            "type": "Delegate",
            "slots": slots
        }
    }